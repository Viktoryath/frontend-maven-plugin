name: Build

on: [push, pull_request, workflow_dispatch]

jobs:
  build:
    name: "Run build"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]

    steps:
      - name: Git checkout
        uses: actions/checkout@v4
      - name: Use cache
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: "${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}"
          restore-keys: |
            ${{ runner.os }}-maven3-
            
      # Configure java to version 17
      - name: Configure Java
        uses: actions/setup-java@v4.5.0
        with:
          java-version: "17"
          distribution: temurin
          
      - name: Cache SonarQube dependencies
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          
      - name: Run SonarQube Scanner
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}
          SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
          SONAR_URL: ${{ secrets.SONAR_URL }}
        run: |
          mvn clean verify \
              org.sonarsource.scanner.maven:sonar-maven-plugin:5.0.0.4389:sonar \
             -Dsonar.organization=${{ env.SONAR_ORGANIZATION }} \
             -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
             -Dsonar.host.url=${{ env.SONAR_URL }} \
             -Dsonar.token=${{ env.SONAR_TOKEN }} \
             -Dsonar.java.binaries=target/classes \
             -Dsonar.verbose=true
          #ls -R target/sonar || echo "No sonar directory found."
          cat target/sonar/report-task.txt || echo "No report-task.txt file found."
          SONAR_TASK_ID=$(grep '^ceTaskId=' .scannerwork/report-task.txt | cut -d'=' -f2)
          echo "Sonar Task ID: $SONAR_TASK_ID"
          # Poll the SonarQube API for Quality Gate status
          STATUS_URL="${{ env.SONAR_URL }}/api/qualitygates/project_status?analysisId=$SONAR_TASK_ID"
          echo "Polling Quality Gate API at: $STATUS_URL"
          STATUS=$(curl -s -u ${{ secrets.SONAR_TOKEN }}: "$STATUS_URL" | jq -r '.projectStatus.status')
          echo "Quality Gate Status: $STATUS"

          # Fail the build if the Quality Gate status is not "OK"
          #if [ "$STATUS" != "OK" ]; then
          #  echo "Quality Gate failed. Blocking the pipeline."
          #  exit 1
          #fi
      
      # Upload SonarQube to GitHub Insight
      - name: Upload SonarQube results to GitHub Insights
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          entryPoint: "/entrypoint.sh"
          args: |
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.host.url=${{ secrets.SONAR_URL }}
            -Dsonar.java.binaries=frontend-maven-plugin/target/classes
            -Dsonar.exclusions=target/**,bin/**,**/*.class
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Build project
      - name: "Run Maven"
        shell: bash
        run: mvn clean install --batch-mode -PintegrationTests
      
      # Create project
      - name: Package
        run: mvn -B clean package -DskipTests

      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v2
        with:
           version: 2.72.2
           
      - name: JFrog CLI
        env:
          JFROG_URL: https://trialkl8y5h.jfrog.io/artifactory
          JFROG_USER: ${{ secrets.ARTIFACTORY_USER }}
          JFROG_PASSWORD: ${{ secrets.ARTIFACTORY_PASSWORD }}
        run: |
          jfrog rt u "frontend-maven-plugin/target/*.jar" "exam-snapshot/" --build-name="my-build" --build-number="1" --url="https://trialkl8y5h.jfrog.io/artifactory" --user="$JFROG_USER" --password="$JFROG_PASSWORD"
          jfrog rt bp "my-build" "1" --url="https://trialkl8y5h.jfrog.io/artifactory" --user="$JFROG_USER" --password="$JFROG_PASSWORD"
          jfrog rt bs "my-build" "1" --url="https://trialkl8y5h.jfrog.io/artifactory" --user="$JFROG_USER" --password="$JFROG_PASSWORD" --fail

